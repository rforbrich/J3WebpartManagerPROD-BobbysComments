/**
 * Factory.min.js
 * @build 2022.08.10
 * @author Wilfredo Pacheco
 * (C) 2020-2022 WP
 */


/**
 * SortByOrder
 * @param {Object} a Order property is call on this object to compare to the following;
 * @param {Object} b Order property is call on this object to compare to the following;
 */
export function SortByOrder(a, b) {
    return a.Order - b.Order;
}


/**
 * @param {String} Str Progress String passed by application;
 */
export function ProgressLog(Str, Callback){

    if ( !!Callback ){ Callback(Str) }

    try {
        return console.info('%c' + Str, 'background: #222; color: #23d82f');
    }

    /** This catches non-Google Chrome browsers; */
    catch(e) {   
        return console.info(Str)
    };
}


/**
 * Used to return the d property from the Object passed;
 * @return {Object} Data property value from SharePoint response;
 */
export function ReturnDataProperty(data){
    return data.d;
}


/**
 * Field
 * @desc FieldTypeKind for Microsoft SharePoint
 *  
 * @type {FieldTypeKind} - 2 (Single Line of Text)
 * @type {FieldTypeKind} - 3 (Mulitiple Lines of Text)
 * @type {FieldTypeKind} - 4 (Date)
 * @type {FieldTypeKind} - 6 (Choice)
 * @type {FieldTypeKind} - 7 (Lookup)
 * @type {FieldTypeKind} - 8 (Boolean)
 * @type {FieldTypeKind} - 9 (Number)
 * @type {FieldTypeKind} - 20 (Person or Group)
 * 
 */
 export function Field(Title, FieldTypeKind){
    this.__metadata = { type: "SP.Field" };
    this.Title = Title;
    this.FieldTypeKind = FieldTypeKind;
    this.Required = false;
    this.EnforceUniqueValues = false;
    this.StaticName = Title;
}


/**
 * List
 * @param {String} Title Title of list;
 * @param {String} Description description of list;
 * @param {Number} BaseTemplate Microsoft SharePoint template number value;
 * @exmaple
 * BaseTemplate: 100 Regular List
 * BaseTemplate: 106 Calendar List
 */
export function List(Title, Description, BaseTemplate){
    
    this.__metadata = { type: "SP.List" };
    this.AllowContentTypes = true;
    this.BaseTemplate = BaseTemplate;
    this.ContentTypesEnabled = true;
    this.Description = Description;
    this.Title = Title;
}


export default async function CreateList(App, Options, Callback){

    const { Route, Web } = App;
    const { AddViewFieldTitle, AddViewFieldGUID, Fields, PredefinedData } = Options;
    const SharepointList = new List(Options.List.Title, Options.List.Description, Options.List.BaseTemplate);
    const ReqDigest = await Route.GetRequestDigest();
    const SharepointFieldArray = new Array();
    for (const field of Fields)
    {
        const { Title, FieldTypeKind } = field;
        const FieldItem = new Field(Title, FieldTypeKind);

        // Since the new Field call doesn't handle the EnforceUniqueValues property;
        if (field.EnforceUniqueValues) FieldItem.EnforceUniqueValues = field.EnforceUniqueValues;

        // Since the new Field call doesn't handle the Required property;
        if (field.Required) FieldItem.Required = field.Required;
        SharepointFieldArray.push(FieldItem);
    }

    ProgressLog('Creating ' + SharepointList.Title + ' List....', Callback); // Progress Checkpoint;
    const ListResponse = await Route.Post(Web.Url +
    '/_api/web/lists',
    SharepointList,
    ReqDigest).then(ReturnDataProperty);
    ProgressLog('Create ' + SharepointList.Title + ' Complete', Callback); // Progress Checkpoint;
    ProgressLog('Creating Fields....', Callback);                          // Progress Checkpoint;

    for (const field of SharepointFieldArray)
    {
        const { Title } = field;
        ProgressLog('Creating ' + Title + ' Field....', Callback);         // Progress Checkpoint;

        const RoleTitleResponse = await Route.Post(ListResponse.__metadata.uri +
        '/Fields',
        field,
        ReqDigest).then(ReturnDataProperty);
        if (RoleTitleResponse?.FieldTypeKind === 6)
        {
            const template = Fields.find(f => f.Title === RoleTitleResponse.Title);
            if (template?.Choices)
            {
                const ChoiceRequest = RoleTitleResponse.Choices;
                ChoiceRequest.results = template.Choices;
                delete ChoiceRequest.__metadata;
                await Route.Patch(RoleTitleResponse.__metadata.uri, {
                    Choices: ChoiceRequest,
                    __metadata: {
                        type: RoleTitleResponse.__metadata.type
                    }
                }, ReqDigest);
            }
        }
        ProgressLog('Create ' + Title + ' Complete', Callback); // Progress Checkpoint;
    }
    ProgressLog('Create Fields Complete', Callback); // Progress Checkpoint;

    /** Start Fix the View */
    ProgressLog('Updating Default View....', Callback); // Progress Checkpoint;
    const ChangeDefaultView = await Route.Get(ListResponse.DefaultView.__deferred.uri, {
        $select: '*',
        $expand: 'ViewFields'
    },
    ReqDigest);

    /**Add Fields: Default View */
    await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri +
    '/removeAllViewFields()', {}, ReqDigest).then(ReturnDataProperty);

    /** Checks for the option to add Title to the default view; */
    if (AddViewFieldTitle) await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri +
    '/addViewField(\'Title\')', new Object(), ReqDigest).then(ReturnDataProperty);

    const DefaultViewFields = Fields.filter(item => !!item.DefaultView);
    DefaultViewFields.sort(SortByOrder);

    for (const field of DefaultViewFields) await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri +
    '/addViewField(\''+ field.Title + '\')', new Object(), ReqDigest).then(ReturnDataProperty);
    
    if (AddViewFieldGUID) await Route.Post(ChangeDefaultView.ViewFields.__metadata.uri +
    '/addViewField(\'GUID\')', {}, ReqDigest).then(ReturnDataProperty);

    ProgressLog('Updating Default View Complete', Callback); // Progress Checkpoint;
    /** End Fix the View */
    
    if (PredefinedData && PredefinedData.length)
    {
        ProgressLog('Creating Default List Items......', Callback); // Progress Checkpoint;
        const Metadata = { type: ListResponse.ListItemEntityTypeFullName };
        const ListItems = PredefinedData.map(item => {
            item.__metadata = Metadata;
            return item;
        });
    
        const FirstColumnLabel = Object.keys(PredefinedData[0])[0];
        var predefineddatacount = 0;

        for (const request of ListItems)
        {
            predefineddatacount++
            const response = await Route.Post(ListResponse.__metadata.uri +
            '/Items',
            request,
            ReqDigest).then(ReturnDataProperty);
    
            ProgressLog(`Data for ${
                ListResponse.Title
            } | ${
                predefineddatacount
            } of ${
                ListItems.length
            } | ${
                response[ FirstColumnLabel ]
            }`, Callback); // Progress Checkpoint;
        }
    
        ProgressLog('Create ' + SharepointList.Title + ' Items Complete', Callback); // Progress Checkpoint;
    }

    Web.Lists.results.push(ListResponse);
    return ListResponse;
}